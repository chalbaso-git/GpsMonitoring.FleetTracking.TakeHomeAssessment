name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependencias
        run: dotnet restore

      - name: Compilar solución
        run: dotnet build --no-restore --configuration Release

      - name: Ejecutar pruebas unitarias
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Publicar reporte de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: '**/TestResults/**/coverage.cobertura.xml'

  sonarqube:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  deploy:
    needs: sonarqube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Autenticación en el cluster
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Desplegar en Kubernetes
        run: kubectl apply -f deployment.yaml